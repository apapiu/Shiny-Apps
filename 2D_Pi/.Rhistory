library(ggplot2)
generate_points <- function(num){
#generate points in a square:
x <- replicate(2, runif(num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
return(data.frame(x, inside))
}
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(column(verticalLayout(
wellPanel("We will aproximate Pi by generating random points
in a square and then counting what fraction of those
points are inside the circle contained in the square.
You can think of this as randomly throwing darts at a square board.
Since we know what the area of a square is we've
replaced a calculus problem with a counting problem! Play around with the slider on the
right - you should (on average) get a better approximation of Pi the more points you use."),
wellPanel(sliderInput(inputId = "num",
label = "Number of Points",
value = 1000, min = 10, max = 30000)),
wellPanel("Your approximation of pi is:",
verbatimTextOutput("pi"))) , width = 3),
column(plotOutput("plot", width = "800px", height = "800px"),
width = 8)
)
)
server <- function(input, output) {
rv <- reactive({generate_points(input$num)})
output$pi <- renderPrint({
4 *sum(rv()$inside)/input$num
})
output$plot <- renderPlot({
plot(x = rv()$X1, y = rv()$X2, xlab = "x", ylab = "y",
col = as.factor(rv()$inside), pch=20)
})
}
shinyApp(ui = ui, server = server)
getwd
getwd()
ls
ls()
read.table("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt")
readline("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt")
x = readLine("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt")
x = readLines("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt")
s
x
x[2]
x[2][1]
readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt")
readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt", nchars = 100)
x = readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt", nchars = 100)
readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt", nchars = 100)
x
x
x
print(x)
library(shiny)
library(shinythemes)
library(ggplot2)
generate_points <- function(num){
#generate points in a square:
x <- replicate(2, runif(num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
return(data.frame(x, inside))
}
text = readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt", nchars = 100)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(column(verticalLayout(
wellPanel(text),
wellPanel(sliderInput(inputId = "num",
label = "Number of Points",
value = 1000, min = 10, max = 30000)),
wellPanel("Your approximation of pi is:",
verbatimTextOutput("pi"))) , width = 3),
column(plotOutput("plot", width = "800px", height = "800px"),
width = 8)
)
)
server <- function(input, output) {
rv <- reactive({generate_points(input$num)})
output$pi <- renderPrint({
4 *sum(rv()$inside)/input$num
})
output$plot <- renderPlot({
plot(x = rv()$X1, y = rv()$X2, xlab = "x", ylab = "y",
col = as.factor(rv()$inside), pch=20)
})
}
shinyApp(ui = ui, server = server)
text
library(shiny)
library(shinythemes)
library(ggplot2)
generate_points <- function(num){
#generate points in a square:
x <- replicate(2, runif(num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
return(data.frame(x, inside))
}
text = readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt", nchars = 100)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(column(verticalLayout(
wellPanel(text),
wellPanel(sliderInput(inputId = "num",
label = "Number of Points",
value = 1000, min = 10, max = 30000)),
wellPanel("Your approximation of pi is:",
verbatimTextOutput("pi"))) , width = 3),
column(plotOutput("plot", width = "800px", height = "800px"),
width = 8)
)
)
server <- function(input, output) {
rv <- reactive({generate_points(input$num)})
output$pi <- renderPrint({
4 *sum(rv()$inside)/input$num
})
output$plot <- renderPlot({
plot(x = rv()$X1, y = rv()$X2, xlab = "x", ylab = "y",
col = as.factor(rv()$inside), pch=20)
})
}
shinyApp(ui = ui, server = server)
text = readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt", nchars = 1e6)
text
library(shiny)
library(shinythemes)
library(ggplot2)
generate_points <- function(num){
#generate points in a square:
x <- replicate(2, runif(num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
return(data.frame(x, inside))
}
text = readChar("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/description.txt", nchars = 1e6)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(column(verticalLayout(
wellPanel(text),
wellPanel(sliderInput(inputId = "num",
label = "Number of Points",
value = 1000, min = 10, max = 30000)),
wellPanel("Your approximation of pi is:",
verbatimTextOutput("pi"))) , width = 3),
column(plotOutput("plot", width = "800px", height = "800px"),
width = 8)
)
)
server <- function(input, output) {
rv <- reactive({generate_points(input$num)})
output$pi <- renderPrint({
4 *sum(rv()$inside)/input$num
})
output$plot <- renderPlot({
plot(x = rv()$X1, y = rv()$X2, xlab = "x", ylab = "y",
col = as.factor(rv()$inside), pch=20)
})
}
shinyApp(ui = ui, server = server)
setwd("/Users/alexpapiu/Documents/R/ShinyApps/2D_Pi/")
library(shiny)
library(shinythemes)
library(ggplot2)
generate_points <- function(num){
#generate points in a square:
x <- replicate(2, runif(num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
return(data.frame(x, inside))
}
descp = readChar("description.txt", nchars = 1e6)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(column(verticalLayout(
wellPanel(descp),
wellPanel(sliderInput(inputId = "num",
label = "Number of Points",
value = 1000, min = 10, max = 30000)),
wellPanel("Your approximation of pi is:",
verbatimTextOutput("pi"))) , width = 3),
column(plotOutput("plot", width = "800px", height = "800px"),
width = 8)
)
)
server <- function(input, output) {
rv <- reactive({generate_points(input$num)})
output$pi <- renderPrint({
4 *sum(rv()$inside)/input$num
})
output$plot <- renderPlot({
plot(x = rv()$X1, y = rv()$X2, xlab = "x", ylab = "y",
col = as.factor(rv()$inside), pch=20)
})
}
shinyApp(ui = ui, server = server)
ls
ls()
library(shiny)
library(shinythemes)
library(ggplot2)
generate_points <- function(num){
#generate points in a square:
x <- replicate(2, runif(num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
return(data.frame(x, inside))
}
descp = readChar("description.txt", nchars = 1e6)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(
column(
verticalLayout(
wellPanel(descp),
wellPanel(sliderInput(inputId = "num",
label = "Number of Points",
value = 1000, min = 10, max = 30000)),
wellPanel("Your approximation of pi is:",
verbatimTextOutput("pi"))) , width = 3),
column(
plotOutput("plot", width = "800px", height = "800px"), width = 8)
)
)
server <- function(input, output) {
rv <- reactive({generate_points(input$num)})
output$pi <- renderPrint({
4 *sum(rv()$inside)/input$num
})
output$plot <- renderPlot({
plot(x = rv()$X1, y = rv()$X2, xlab = "x", ylab = "y",
col = as.factor(rv()$inside), pch=20)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(babynames)
library(data.table)
library(dygraphs)
library(tidyr)
library(dplyr)
library(DT)
names <- data.table(babynames)
ui <- fluidPage( theme = shinytheme("flatly"),
tabsetPanel(
tabPanel("Boy Names",
sidebarLayout(
sidebarPanel( helpText("Pick up to five names below and explore their popularity as baby names over time:"),
textInput(inputId = "name1", " ", value = "Alexander"),
textInput(inputId = "name2", " ", value = "Jonathan"),
textInput(inputId = "name3", " ", value = "Cody"),
textInput(inputId = "name4", " "),
textInput(inputId = "name5", " "),
numericInput(inputId = "yearm",label = "Pick a year below to see
the most popular  names for that year:", value = 2014 ),
dataTableOutput(outputId = "list1"),
width = 3),
mainPanel(wellPanel(dygraphOutput("plot1"),
width = 9)
)
)
),
tabPanel("Girl Names",
sidebarLayout(
sidebarPanel( helpText("Pick up to five names below and explore their popularity as baby names over time:"),
textInput(inputId = "name6", " ", value = "Judy"),
textInput(inputId = "name7", " ", value = "Emma"),
textInput(inputId = "name8", " ", value = "Samantha"),
textInput(inputId = "name9", " "),
textInput(inputId = "name10", " "),
numericInput(inputId = "yearf",label = "Pick a year below to see
the most popular  names for that year:", value = 2014 ),
dataTableOutput(outputId = "list2"),
width = 3),
mainPanel(wellPanel(dygraphOutput("plot2"),
width = 9)
)
)
),
tabPanel("Gender Neutral Names",
sidebarLayout(
sidebarPanel(
textInput(inputId = "neutral_name", "Pick a name to see its popularity by sex:",
value = ""),
tags$br(),
numericInput(inputId = "year2",label = "Don't know where to start?
Pick a year below to see the most popular gender-neutral names
for that year:", value = 2014 ),
dataTableOutput(outputId = "list3"),
width = 3
),
mainPanel(
wellPanel(plotOutput("plot3"))
#wellPanel(plotOutput("plot2"))
)
)
)
)
)
server <- function(input, output) {
output$plot1 <- renderDygraph({
names[name %in% c(input$name1, input$name2, input$name3,input$name4,
input$name5)][sex == "M"][,prop := NULL][,sex := NULL][year > 1910] %>%
spread(key = name, value = n) %>%
dygraph() %>%
dyAxis("y",label = "Baby Count", labelWidth = 14 ) %>%
dyAxis("x", drawGrid = FALSE , label = "Year of Birth", labelHeight = 14) %>%
dyOptions(axisLineWidth = .5, strokeWidth = 1.5, axisTickSize = 10,
axisLabelFontSize = 12, gridLineColor = "lightgrey",
axisLabelColor = "grey", axisLineColor = "grey",
colors = RColorBrewer::brewer.pal(5, "Dark2"))
})
output$plot2 <- renderDygraph({
names[name %in% c(input$name6, input$name7, input$name8,input$name9,
input$name10)][sex == "F"][,prop := NULL][,sex := NULL][year > 1910] %>%
spread(key = name, value = n) %>%
dygraph() %>%
dyAxis("y",label = "Baby Count", labelWidth = 14 ) %>%
dyAxis("x", drawGrid = FALSE , label = "Year of Birth", labelHeight = 14) %>%
dyOptions(axisLineWidth = .5, strokeWidth = 1.5, axisTickSize = 10,
axisLabelFontSize = 12, gridLineColor = "lightgrey",
axisLabelColor = "grey", axisLineColor = "grey",
colors = RColorBrewer::brewer.pal(5, "Dark2"))
})
#output$plot2 <- renderPlot({
#
#    names[name == input$neutral_name][year > 1960] %>%
#        ggplot(aes(x = year, y = n, fill = sex)) +
#        #geom_area(position = "fill") +
#        geom_bar(stat = "identity", position = "fill", width = 1) +
#        ylab("Fraction Female/Male") +
#        geom_hline(yintercept = .5) + theme_minimal() +
#        scale_fill_brewer(palette = "Set1") +
#        ggtitle("Proportion of Babies with the given name by Sex")
#
#})
output$plot3 <- renderPlot({
names[name == input$neutral_name][year > 1960] %>%
ggplot(aes(x = year, y = n, color = sex)) +
#geom_area(position = "fill") +
#geom_bar(stat = "identity", position = "dodge", width = 1) +
geom_line() +
ylab("Baby Count") +
geom_hline(yintercept = .5) + theme_minimal() +
scale_color_brewer(palette = "Set1")
})
output$list1 <- renderDataTable({
names[year == input$yearm][sex == "M"][,.(name = name, count = n)] %>%
head(100) %>%
datatable(options = list(dom = "tp"))
})
output$list2 <- renderDataTable({
names[year == input$yearf][sex == "F"][,.(name = name, count = n)] %>%
head(100) %>%
datatable(options = list(dom = "tp"))
})
output$list3 <- renderDataTable({
names[year == input$year2] %>%
.[,prop := NULL] %>%
spread(sex, n, fill = 0) %>%
mutate(count = F + M, frac = F/(M + F)) %>%
.[frac >0.4] %>%
.[frac <0.6] %>%
arrange(desc(count)) %>%
transmute(name, count) %>% datatable(options = list(dom = "tp"))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(babynames)
library(data.table)
library(dygraphs)
library(tidyr)
library(dplyr)
library(DT)
install.packages(babynames)
install.packages("babynames")
library(shiny)
library(shinythemes)
library(ggplot2)
library(babynames)
library(data.table)
library(dygraphs)
library(tidyr)
library(dplyr)
library(DT)
names <- data.table(babynames)
ui <- fluidPage( theme = shinytheme("flatly"),
tabsetPanel(
tabPanel("Boy Names",
sidebarLayout(
sidebarPanel( helpText("Pick up to five names below and explore their popularity as baby names over time:"),
textInput(inputId = "name1", " ", value = "Alexander"),
textInput(inputId = "name2", " ", value = "Jonathan"),
textInput(inputId = "name3", " ", value = "Cody"),
textInput(inputId = "name4", " "),
textInput(inputId = "name5", " "),
numericInput(inputId = "yearm",label = "Pick a year below to see
the most popular  names for that year:", value = 2014 ),
dataTableOutput(outputId = "list1"),
width = 3),
mainPanel(wellPanel(dygraphOutput("plot1"),
width = 9)
)
)
),
tabPanel("Girl Names",
sidebarLayout(
sidebarPanel( helpText("Pick up to five names below and explore their popularity as baby names over time:"),
textInput(inputId = "name6", " ", value = "Judy"),
textInput(inputId = "name7", " ", value = "Emma"),
textInput(inputId = "name8", " ", value = "Samantha"),
textInput(inputId = "name9", " "),
textInput(inputId = "name10", " "),
numericInput(inputId = "yearf",label = "Pick a year below to see
the most popular  names for that year:", value = 2014 ),
dataTableOutput(outputId = "list2"),
width = 3),
mainPanel(wellPanel(dygraphOutput("plot2"),
width = 9)
)
)
),
tabPanel("Gender Neutral Names",
sidebarLayout(
sidebarPanel(
textInput(inputId = "neutral_name", "Pick a name to see its popularity by sex:",
value = ""),
tags$br(),
numericInput(inputId = "year2",label = "Don't know where to start?
Pick a year below to see the most popular gender-neutral names
for that year:", value = 2014 ),
dataTableOutput(outputId = "list3"),
width = 3
),
mainPanel(
wellPanel(plotOutput("plot3"))
#wellPanel(plotOutput("plot2"))
)
)
)
)
)
server <- function(input, output) {
output$plot1 <- renderDygraph({
names[name %in% c(input$name1, input$name2, input$name3,input$name4,
input$name5)][sex == "M"][,prop := NULL][,sex := NULL][year > 1910] %>%
spread(key = name, value = n) %>%
dygraph() %>%
dyAxis("y",label = "Baby Count", labelWidth = 14 ) %>%
dyAxis("x", drawGrid = FALSE , label = "Year of Birth", labelHeight = 14) %>%
dyOptions(axisLineWidth = .5, strokeWidth = 1.5, axisTickSize = 10,
axisLabelFontSize = 12, gridLineColor = "lightgrey",
axisLabelColor = "grey", axisLineColor = "grey",
colors = RColorBrewer::brewer.pal(5, "Dark2"))
})
output$plot2 <- renderDygraph({
names[name %in% c(input$name6, input$name7, input$name8,input$name9,
input$name10)][sex == "F"][,prop := NULL][,sex := NULL][year > 1910] %>%
spread(key = name, value = n) %>%
dygraph() %>%
dyAxis("y",label = "Baby Count", labelWidth = 14 ) %>%
dyAxis("x", drawGrid = FALSE , label = "Year of Birth", labelHeight = 14) %>%
dyOptions(axisLineWidth = .5, strokeWidth = 1.5, axisTickSize = 10,
axisLabelFontSize = 12, gridLineColor = "lightgrey",
axisLabelColor = "grey", axisLineColor = "grey",
colors = RColorBrewer::brewer.pal(5, "Dark2"))
})
#output$plot2 <- renderPlot({
#
#    names[name == input$neutral_name][year > 1960] %>%
#        ggplot(aes(x = year, y = n, fill = sex)) +
#        #geom_area(position = "fill") +
#        geom_bar(stat = "identity", position = "fill", width = 1) +
#        ylab("Fraction Female/Male") +
#        geom_hline(yintercept = .5) + theme_minimal() +
#        scale_fill_brewer(palette = "Set1") +
#        ggtitle("Proportion of Babies with the given name by Sex")
#
#})
output$plot3 <- renderPlot({
names[name == input$neutral_name][year > 1960] %>%
ggplot(aes(x = year, y = n, color = sex)) +
#geom_area(position = "fill") +
#geom_bar(stat = "identity", position = "dodge", width = 1) +
geom_line() +
ylab("Baby Count") +
geom_hline(yintercept = .5) + theme_minimal() +
scale_color_brewer(palette = "Set1")
})
output$list1 <- renderDataTable({
names[year == input$yearm][sex == "M"][,.(name = name, count = n)] %>%
head(100) %>%
datatable(options = list(dom = "tp"))
})
output$list2 <- renderDataTable({
names[year == input$yearf][sex == "F"][,.(name = name, count = n)] %>%
head(100) %>%
datatable(options = list(dom = "tp"))
})
output$list3 <- renderDataTable({
names[year == input$year2] %>%
.[,prop := NULL] %>%
spread(sex, n, fill = 0) %>%
mutate(count = F + M, frac = F/(M + F)) %>%
.[frac >0.4] %>%
.[frac <0.6] %>%
arrange(desc(count)) %>%
transmute(name, count) %>% datatable(options = list(dom = "tp"))
})
}
shinyApp(ui = ui, server = server)
runApp('~/Documents/R/ShinyApps/baby_names')
runApp()
