{
    "contents" : "library(boot)\nlibrary(ggplot2)\nlibrary(caret)\nlibrary(dplyr) \nlibrary(stringr) #much faster than Rbase string stuff\nlibrary(plotly) #amazing interactive graphics\nlibrary(GGally)\n\nsystem.time(runif(21331)) #times the running code\n\nclass(df) #give the type of object \n\nif (meow == 1) {print(\"fuck\"); meow <- 7} else print(\"muie\")\n\nfunction(x){x^2+lenght(x)} # gives an anonimous function f(x)= stuff in \n#curly brackets like lambda function in python\n\nappend(vector, x) #returns vector with x appended\n#also if you have \ntest = c(1,2) #you can append by \ntest[3] = 4 #but this is not possible in python\n\nreplicate(10, runif(3)) #generates 10 random 3-dimensional vectors \n\nx<- replicate(100, cv.glm(Advertising, model, K = 10)$delta[1])\n#does CV a hundred times so you have a better idea of test error\n\ny <- cv.glm(Advertising, model1, K = 10)\n#cross-validation with boot for glm's\n\nweights[[length(weights)+1]] <- w #append an element to a list\n\n\n\n#_______________________________________\n#SUBSETTING & DATAFRAMES\n#______________________________________\n\nsubset(v, v%%2 == 0) #gives all entries with given property \nv[v%%2 == 0] #same as above\n\nm116 <- data[grep(pattern = \"M116\",data$trip_id), ] #search for the pattern\n\n\nunlist(df[1:3,3]) #outputs a vector instead of a list\n\ntrain[3:5] #returns the same data type - so  in this case\ntrain[[1,3]] #return an element in the list \n\napply(df, 1, mean) #takes the mean of each row in the df\n\ns<-split(train, train$Sex) #splits based on Sex or any other property NICE\n\n\nsapply(train, function(x) sum(is.na(x))) #check for NA's' in every row\n\ntrain[train$Embarked %in% c(\"S,D\"),] #the in works as belongs to set\n\ns<-split(train, train$Sex) #splits based on Sex or any other property NICE\n\ndf <- droplevels(df) #removes the original levels of the DF\n\n#dplyr\n\nbeer_reviews %>% \n    group_by(beer_abv) %>% \n    summarize(mean(review))\n\nbeers %>% \n    distinct(beer_beerid) %>% \n    filter(grep(\"IPA\", beer_name)) %>% \n    group_by(brewery_name) %>% \n    summarize(abv = mean(beer_abv), num = n()) %>% \n    filter(num >=10) %>% \n    arrange(desc(abv))\n\nbeers2 %>% \n    group_by(beer_style) %>% \n    summarize(mean(review_overall),\n              n_distinct(beer_beerid)) %>% #n_distinct is important\n    head()\n\nnewdf <- inner_join(x, y, by = \"columns\")\n\n#data.table:\n\nbeers2[ , .(grade = round(mean(review_overall),2)* 2, num = .N), \n        by = beer_name][num>1000][order(-grade)]\n\n#____________________________________________\n#VISUALIZATION\n#____________________________________________\n\nggpairs() #GGally\ncorrplot()  #corrplot\n\n#____________________________________________\n#INPUT/OUTPUT\n#____________________________________________\n\n\ngetwd()\nsetwd(\"/Users/alexpapiu\") #sets new working directory\ndir() #lists the files in the working directory\n\nfread() #data.table -SO FAST\n\nreadLines (\"Unititled.Rmd\") # reads from the working directory\nwrite(\"I am doing great\", \"newtext.txt\")\nwrite.csv(matrix(1:100, nrow = 10), file = \"data2.csv\") #write a csv.file\n\nsource(\"testscript.R\") # load and execute a script of R commands + Functions!\n\nsink(\"data.txt\")  #redirects the output to the file\nmatrix(1:100, nrow = 10)\nsink()\n\njpeg(\"testplot.jpg\", width = 1200) #writes a file image plot\nplot(1:7)\ndev.off()\n\nsave(train, file = \"data.Rd\") #saves the data in the global environ\nload(\"data.Rd\") #loads it much faster\nsave.image(file = \"Risk.RData\") #save all the data in the workspace\n\n#____________________________________________\n#SCRAPING\n#____________________________________________\n\nlibrary(XML)\nlibrary(RCurl)\n\nurl <- \"https://en.wikipedia.org/wiki/Gun_violence_in_the_United_States_by_state\"\n\ntabs2 <- getURL(url)\ntabs2 <- readHTMLTable(tabs2, which = 1, stringsAsFactors = F)\n\n#______________________________________\n#DISTRIBUTIONS\n#______________________________________\npnorm(q = 2, lower.tail = FALSE) #probability x is greater than q in ur dist\n\nqnorm(p = .975) #value of x for which prob (x is less than 1) is p - zscore for .95\n\nrbinom(n = 1000, size = 3000, prob = .1) #do (flip 3000 biased coins) 1000 times\n\nqbinom(.975, 3000, .1) \n\nbinom.test(56, 100) #tests directly \n\n\n#____________________________\n#NLP\n#____________________________\n\ntemp = \"I am going to the market to buy lettuce$\"\n\nsub(pattern = \"$\", replacement = \"$$\", input, fixed = TRUE) #replaces pat with rep\ngsub #replaces all occurences\nstrsplit(x = temp, \" \") #splits the string based on words \nsubstr(temp, 1, 3) #Gives firs three chars in your string\nnchar(temp) #number of chars\ngrep(\"las\", temp, value = TRUE) #looks for that pattern in every string in the list\n\n\n#_______________________________\n#PCA:\n#_______________________________\ntrans = preProcess(spam[,1:57], \n                   pcaComp = 2,\n                   method=c(\"BoxCox\", \"center\", \n                            \"scale\", \"pca\"))\n\ntrans$std\n\ntrans$rotation #PCA linear comb for the components\n\nPC = predict(trans, spam[,1:57]) #Gives \n\nPC$type<- spam$type\n\nqplot( x = PC1, y = PC2, data = PC, col = type, xlim = c(-3, 3),\n       ylim = c(-3, 3))\n\n#______________________________________________\n#Linear Models\n#______________________________________________\n\nmylogit <- glm(Survived ~ Age + Sex + SibSp, \n               data = new_train, \n               family = \"binomial\"), #Logistic Regression\n\nx <- predict(mylogit, new_test, type = \"response\") #Gives you a probability\ny<-round(x, digits = 0) #makes the probability into classifier\n\n#Polynomials:\nmodel<-train(wage~poly(age, 2, raw = TRUE),\n             data = Wage,\n             method = \"lm\",\n             trControl = trainControl(method = \"cv\",\n                                      number = 5))\n\n\n#______________________________________________\n#DECISION TREE LEARNING + PLOTTING\n#______________________________________________\n\n\nfancyRpartPlot(my_tree) # you get the decision tree printed with nice colors\n\ntree <- rpart(Var ~ Var1+Var2, data = train, method = \"class\")\n\ntree2 <- rpart(Survived ~ ., data = train, method = \"class\" or \"anova\", control = rpart.control(cp = 0, minsplit = 14))\n#partcontrol allows you to modify the parameters makint but careful not to overfit\n\nSur<-randomForest(as.factor(Survived)~Pclass + Sex + \n                      Age +SibSp + Parch + Fare + Embarked, data = train, importance = TRUE, ntree = 1000)\nVarImpPlot(Sur)\nprint(Sur)\n\n#Makes a Random Forest and asses the importance of the variables and \n#printing it you get the OOB and confusion matrix\n\n\nmodel <- train(as.factor(Survived) ~ Pclass + Sex + SibSp + Embarked + Parch + Fare, # Survived is a function of the variables we decided to include\n               data = train, # Use the trainSet dataframe as the training data\n               method = \"rf\",# Use the \"random forest\" algorithm\n               trControl = trainControl(method = \"cv\", # Use cross-validation\n                                        number = 5) #use 5 folds for CV\n)\n\nmodel #to see the model      \n\npredict(tree, test, type = \"class\" )\n#gives you a prediction of your data DO NOT SAY data = test\n\nmyprediction<-predict(Sur, test) #predicts with random forest.\n\n\n\n#_______________________________________________________________\n#POLYNOMIALS\n#_______________________________________________________________\n\nlibrary(polynom)\nlibrary(orthopolynom)\n\nx <- polynomial(coef = c(1,2,3)) #gives a poly with coefficients\ny <- polynomial(c(2,3,4))\n\n3*x+y #you can add or scale\n\npredict(x+y, 3) #you can evaluate\n\nlegendre <- legendre.polynomials(3)[[2]] #orthogonal polynomials\n\n\n#____________________________\n#Terminal\n#____________________________\nls \npwd #same as pwd\ncd /Users/alexpapiu #change directory\ncd .. #goes up\n\ncat story.txt #outputs the text\n\nnano ~/.bash_profile #you can modify stuff\nnyt\n\ngrep dog newtest.txt #looks for dog in newtest.txt\ngrep cat * #looks in the whole working directory\n\nsed 's/dog/cat/g' testtext.txt > newtest.txt #replaces dog with cat and \n#writes to the file newtest.txt\n\n#____________________________\n#SQL\n#____________________________\n\nSELECT * FROM movies WHERE genre = \"action\" AND \n(year = 2009 OR year = 2008);\n\nSELECT * FROM movies\nWHERE name LIKE '%man%'; #contains man\n\n#####\n# API's\n\n\nSys.setenv(\"plotly_username\"=\"apapiu\")\nSys.setenv(\"plotly_api_key\"=\"n50najnihl\")\n\n\n\n",
    "created" : 1456042239532.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3957010784",
    "id" : "F04CDC3E",
    "lastKnownWriteTime" : 1456894603,
    "path" : "~/Documents/R/mycode.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}