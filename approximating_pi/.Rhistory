newy_2 <- predict(model_2, newdata = testdf)
newy_10 <- predict(model_10, newdata = testdf)
A = model.matrix(x ~ poly(x, m1))
model_reg = glmnet(A, y)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s=.000001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
m1 = 5
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
newy_2 <- predict(model_2, newdata = testdf)
newy_10 <- predict(model_10, newdata = testdf)
A = model.matrix(x ~ poly(x, m1))
model_reg = glmnet(A, y)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s=.000001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
m1 = 5
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
newy_2 <- predict(model_2, newdata = testdf)
newy_10 <- predict(model_10, newdata = testdf)
A = model.matrix(x ~ poly(x, m1))
model_reg = glmnet(A, y)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s=.000001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
m1 = 5
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
newy_2 <- predict(model_2, newdata = testdf)
newy_10 <- predict(model_10, newdata = testdf)
A = model.matrix(x ~ poly(x, m1))
model_reg = glmnet(A, y)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s=.000001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s=.01, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s=.01, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s=.1, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s=1, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
ui <- fluidPage(theme = shinytheme("flatly"),
titlePanel("Overfitting"),
sidebarLayout(
sidebarPanel(checkboxInput(inputId = "seed", label = "Keep Data"),
sliderInput(inputId = "m1", label = "Degree of First Model", value = 20,
min = 1, max = 10,step = 1),
"Our Second Model",
checkboxInput(inputId = "second", label = "Show Second Model"),
sliderInput(inputId = "m2", label = "Degree of Second Model", value = 20,
min = 1, max = 10,step = 1),
sliderInput(inputId = "n", label = "Number of Examples", value = 50,
min = 10, max = 200,step = 1),
sliderInput(inputId = "q", label = "Degree of Target", value = 1,
min = 1, max = 5,step = 1),
sliderInput(inputId = "s", label = "Level of Noise", value = .5,
min = 0, max = 3,step = .1), width = 3),
mainPanel(plotOutput("plot", width = "800px", height = "600px"))
)
)
ui <- fluidPage(theme = shinytheme("flatly"),
titlePanel("Overfitting"),
sidebarLayout(
sidebarPanel(checkboxInput(inputId = "seed", label = "Keep Data"),
sliderInput(inputId = "m1", label = "Degree of First Model", value = 20,
min = 1, max = 10,step = 1),
"Our Second Model",
checkboxInput(inputId = "second", label = "Show Second Model"),
sliderInput(inputId = "m2", label = "Degree of Second Model", value = 20,
min = 1, max = 10,step = 1),
sliderInput(inputId = "reg", label = "Regularization Parameter", value = 0,
min = 0, max = 1,step = .01),
sliderInput(inputId = "n", label = "Number of Examples", value = 50,
min = 10, max = 200,step = 1),
sliderInput(inputId = "q", label = "Degree of Target", value = 1,
min = 1, max = 5,step = 1),
sliderInput(inputId = "s", label = "Level of Noise", value = .5,
min = 0, max = 3,step = .1), width = 3),
mainPanel(plotOutput("plot", width = "800px", height = "600px"))
)
)
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = data.matrix(x ~ poly(x, m1))
model_2 <- glmnet(A, y)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s=reg, type = "response")
newy_2 <- predict(model_2, newdata = testdf)
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, newy_10, col = "red", pch = 20)
points(test, newy_2, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = data.matrix(x ~ poly(x, m1))
model_2 <- glmnet(A, y)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s=reg, type = "response")
newy_2 <- predict(model_2, newdata = testdf)
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(test, newy_2, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
model_2 <- glmnet(A, y)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s=reg, type = "response")
newy_2 <- predict(model_2, newdata = testdf)
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(test, newy_2, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
model_2 <- glmnet(A, y)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_2, newx = A_test, s=reg, type = "response")
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(test, newy_10, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
model_2 <- glmnet(A, y)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_2, newx = A_test, s=reg, type = "response")
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "red", pch = 20)
points(test, newy_10, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
?"glmnet"
model_reg = glmnet(A, y, lambda.min.ratio = .0001)
new_reg <- predict.glmnet(model_reg, newx = A_test, s=1, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s=0, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s=0.001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
?predict.glmnet
new_reg <- predict.glmnet(model_reg, newx = A_test, type = "response")
View(new_reg)
model_reg = glmnet(A, y, lambda.min.ratio = .0000001)
new_reg <- predict.glmnet(model_reg, newx = A_test,s = 1 type = "response")
new_reg <- predict.glmnet(model_reg, newx = A_test,s = 1, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test,s = 5, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test,s = 90, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test,s = .0001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
model_reg = glmnet(A, y, lambda.min.ratio = 0)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test,s = .0001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
model_2 <- glmnet(A, y, lambda.min.ratio = 0.00001)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_2, newx = A_test, s=reg, type = "response")
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "red", pch = 20)
points(test, newy_10, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
?"glmnet"
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
model_2 <- glmnet(A, y, lambda.min.ratio = 0.000000001)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_2, newx = A_test, s=reg, type = "response")
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "red", pch = 20)
points(test, newy_10, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
grid=10^seq(10,-2,length=100)
grid=10^seq(10,-2,length=100)
model_reg = glmnet(A, y, lambda = grid)
model_reg = glmnet(A, y, lambda = grid)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test,s = .001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test,s = .00001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, type = "response")
View(A_test)
View(new_reg)
head(grid)
?predict.glmnet
tail(grid)
seq(10,-2,length=100)
10^seq(10,-2,length=100)
grid=10^seq(1,-2,length=100)
10^seq(1,-2,length=100)
grid=10^seq(1,-5,length=100)
10^seq(1,-5,length=100)
grid=10^seq(1,-5,length=100)
model_reg = glmnet(A, y, lambda = grid)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
model_reg = glmnet(A, y, lambda = grid)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
new_reg <- predict.glmnet(model_reg, newx = A_test, s= 0.001 type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s= 0.001 type = "response")
new_reg <- predict.glmnet(model_reg, newx = A_test, s= 0.001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s= 0.00001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
model_reg = glmnet(A, y, lambda = 0)
A_test = model.matrix(test~ poly(test, m1))
new_reg <- predict.glmnet(model_reg, newx = A_test, s= 0.00001, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
new_reg <- predict.glmnet(model_reg, newx = A_test, s= 0.00001, type = "response")
new_reg <- predict.glmnet(model_reg, newx = A_test, type = "response")
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "orange", pch = 20)
points(x, y, col = "dark blue")
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
grid=10^seq(1,-5,length=100)
model_2 <- glmnet(A, y, lambda = grid)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_2, newx = A_test, s=reg, type = "response")
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "red", pch = 20)
points(test, newy_10, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
grid=10^seq(1,-5,length=100)
model_2 <- glmnet(A, y, lambda = grid, standardize = FALSE)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_2, newx = A_test, s=reg, type = "response")
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "red", pch = 20)
points(test, newy_10, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
