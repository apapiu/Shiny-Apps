county_votes %>% names
county_votes$Trump
range(county_votes$Trump)
highchart() %>%
hc_title(text = "Change in Vote Percentage Between Obama (2012) and Clinton (2016)",
align = "left") %>%
hc_add_series_map(
uscountygeojson, county_votes, borderWidth = 0.2,
name = "Trump", value = "Trump", joinBy = "fips") %>%
hc_colorAxis(stops = dstops, min = 0.15, max = 0.9)  %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_legend(title = "Clinton")
n <- 32
dstops <- data.frame(q = 0:n/n,
)
n <- 32
dstops <- data.frame(q = 0:n/n, c = substring(viridis(n + 1, option = "B"), 0, 7))
dstops <- list_parse2(dstops)
n <- 32
dstops <- data.frame(q = 0:n/n, c = substring(viridis(n + 1, option = "B"), 0, 7))
dstops <- list_parse2(dstops)
highchart() %>%
hc_title(text = "Trump Votes",
align = "left") %>%
hc_add_series_map(
uscountygeojson, county_votes, borderWidth = 0.2,
name = "Trump", value = "Trump", joinBy = "fips") %>%
hc_colorAxis(stops = dstops, min = 0.15, max = 0.9) %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_legend(title = "Clinton")
?hc_colorAxis
viridis(n + 1, option = "B")
viridis
viridis(n + 1, option = "B")
viridis(n + 1, option = "B") %>% rev
n <- 32
dstops <- data.frame(q = 0:n/n, c = substring(rev(viridis(n + 1, option = "B")), 0, 7))
dstops <- list_parse2(dstops)
highchart() %>%
hc_title(text = "Trump Votes",
align = "left") %>%
hc_add_series_map(
uscountygeojson, county_votes, borderWidth = 0.2,
name = "Trump", value = "Trump", joinBy = "fips") %>%
hc_colorAxis(stops = dstops, min = 0.15, max = 0.9,) %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_legend(title = "Clinton")
pal <- brewer.pal(11, "RdBu")
pal <- brewer.pal(11, "RdBu")
pal <- brewer.pal(11, "RdBu")
dstops <- data.frame(q = 0:n/n, c = pal)
library(data.table)
library(data.table)
library(dplyr)
library(ggplot2)
library(highcharter)
library(viridisLite)
library(RColorBrewer)
library(data.table)
library(dplyr)
library(ggplot2)
library(highcharter)
library(viridisLite)
library(RColorBrewer)
data(uscountygeojson)
county_votes = fread("/Users/alexpapiu/Downloads/2012-and-2016-presidential-elections/votes.csv")
#need to pad zeroes to some fips for join with geojson data:
fips = county_votes$fips
county_votes$fips = ifelse(nchar(fips) !=4, fips, paste0(0, fips))
pal <- brewer.pal(11, "RdBu")
dstops <- data.frame(q = 0:n/n, c = pal)
data.frame(q = 0:n/n, c = pal)
n = 10
pal <- brewer.pal(11, "RdBu")
dstops <- data.frame(q = 0:n/n, c = pal)
dstops <- list_parse2(dstops)
column = "Clinton_Obama"
names(county_votes)
ggplot(county_votes, aes(x = Trump)) + geom_histogram()
ggplot(county_votes, aes(x = Trump)) + geom_histogram(color = "black")
ggplot(county_votes, aes(x = Clinton)) + geom_histogram(color = "black")
ggplot(county_votes, aes(x = Omaba)) + geom_histogram(color = "black")
ggplot(county_votes, aes(x = Obama)) + geom_histogram(color = "black")
ggplot(county_votes, aes(x = Romney)) + geom_histogram(color = "black")
ggplot(county_votes, aes(x = Trump)) + geom_histogram(color = "black")
ggplot(county_votes, aes(x = Trump)) + geom_histogram(color = "black") +
geom_histogram(aes(x = Hillary))
ggplot(county_votes, aes(x = Trump)) + geom_histogram(color = "black") +
geom_histogram(county_votesm aes(x = Hillary))
ggplot(county_votes, aes(x = Trump)) + geom_histogram(color = "black") +
geom_histogram(county_votes,  aes(x = Hillary))
ggplot(county_votes, aes(x = Trump)) + geom_histogram(color = "black")
ggplot(county_votes) + geom_histogram(aes(x = Trump), color = "black")
ggplot(county_votes) +
geom_histogram(aes(x = Trump), color = "black") +
geom_histogram(aes(x = Hillary), color = "black")
ggplot(county_votes) +
geom_histogram(aes(x = Trump), color = "black") +
geom_histogram(aes(x = Clinton), color = "black")
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "red", alpha = 0.5) +
geom_histogram(aes(x = Clinton), fill = "blue", alpha = 0.5)
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "red", alpha = 0.5) +
geom_histogram(aes(x = Obama), fill = "blue", alpha = 0.5)
ggplot(county_votes) +
geom_density(aes(x = Trump), fill = "red", alpha = 0.5) +
geom_histogram(aes(x = Clinton), fill = "blue", alpha = 0.5)
ggplot(county_votes) +
geom_density(aes(x = Trump), fill = "red", alpha = 0.5) +
geom_density(aes(x = Clinton), fill = "blue", alpha = 0.5)
ggplot(county_votes) +
geom_density(aes(x = Romney), fill = "red", alpha = 0.5) +
geom_density(aes(x = Obama), fill = "blue", alpha = 0.5)
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "red", alpha = 0.5) +
geom_histogram(aes(x = Clinton), fill = "blue", alpha = 0.5)
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "red", alpha = 0.5) +
geom_histogram(aes(x = Obama), fill = "blue", alpha = 0.5)
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "red", alpha = 0.5) +
geom_histogram(aes(x = Clinton), fill = "blue", alpha = 0.5) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "red", alpha = 0.5) +
geom_histogram(aes(x = Obama), fill = "blue", alpha = 0.5) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "red", alpha = 0.5, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "blue", alpha = 0.5) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "red", alpha = 0.5, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "blue", alpha = 0.5, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.5, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.5, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "#e41a1c", alpha = 0.5) +
geom_histogram(aes(x = Obama), fill = "#377eb8", alpha = 0.5) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.7, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.7, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "#e41a1c", alpha = 0.7) +
geom_histogram(aes(x = Obama), fill = "#377eb8", alpha = 0.7) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.8, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.8, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "#e41a1c", alpha = 0.8) +
geom_histogram(aes(x = Obama), fill = "#377eb8", alpha = 0.8) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.9, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.9, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.7, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.7, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.75, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.75, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.75, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.9, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.9, bins = 20) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.8, bins = 20) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "#e41a1c", alpha = 0.9) +
geom_histogram(aes(x = Obama), fill = "#377eb8", alpha = 0.8) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.9) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.8) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Trump), fill = "#e41a1c", alpha = 0.9) +
geom_histogram(aes(x = Clinton), fill = "#377eb8", alpha = 0.8) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "#e41a1c", alpha = 0.9) +
#geom_histogram(aes(x = Obama), fill = "#377eb8", alpha = 0.8) +
theme_minimal()
ggplot(county_votes) +
geom_histogram(aes(x = Romney), fill = "#e41a1c", alpha = 0.9) +
geom_histogram(aes(x = Obama), fill = "#377eb8", alpha = 0.8) +
theme_minimal()
library(shiny)
library(shinythemes)
library(ggplot2)
library(data.table)
library(dplyr)
library(highcharter)
descp = "Welcome to Airbnb NYC! This is a shiny app where you can explore prices!"
library(data.table)
library(dplyr)
library(ggplot2)
library(highcharter)
library(viridisLite)
library(RColorBrewer)
data(uscountygeojson)
county_votes = fread("/Users/alexpapiu/Downloads/2012-and-2016-presidential-elections/votes.csv")
#need to pad zeroes to some fips for join with geojson data:
county_votes$fips = ifelse(nchar(fips) !=4, fips, paste0(0, fips))
descp = "Great!"
n <- 10
pal <- brewer.pal(11, "RdBu")
dstops <- data.frame(q = 0:n/n, c = pal)
dstops <- list_parse2(dstops)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(
column(
verticalLayout(
wellPanel(descp)
)
) , width = 3),
column(
highchartOutput("plot", width = "800px", height = "800px"), width = 8)
)
#)
server <- function(input, output) {
output$plot <- renderHighchart({
highchart() %>%
hc_title(text = "Change in Vote Percentage Between Obama (2012) and Clinton (2016)",
align = "left") %>%
hc_add_series_map(
uscountygeojson, county_votes, borderWidth = 0.2,
name = "Clinton - Obama", value = "Clinton_Obama", joinBy = "fips") %>%
hc_colorAxis(stops = dstops, min = -0.18, max = 0.18)  %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_legend(title = "Clinton")
})
}
shinyApp(ui = ui, server = server)
library(data.table)
library(dplyr)
library(ggplot2)
library(highcharter)
library(viridisLite)
library(RColorBrewer)
data(uscountygeojson)
county_votes = fread("/Users/alexpapiu/Downloads/2012-and-2016-presidential-elections/votes.csv")
county_votes$fips = ifelse(nchar(fips) !=4, fips, paste0(0, fips))
descp = "Great!"
n <- 10
pal <- brewer.pal(11, "RdBu")
dstops <- data.frame(q = 0:n/n, c = pal)
dstops <- list_parse2(dstops)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(
column(
verticalLayout(
wellPanel(descp)
)
) , width = 3),
column(
highchartOutput("plot", width = "800px", height = "800px"), width = 8)
)
library(data.table)
library(dplyr)
library(ggplot2)
library(highcharter)
library(viridisLite)
library(RColorBrewer)
data(uscountygeojson)
county_votes = fread("/Users/alexpapiu/Downloads/2012-and-2016-presidential-elections/votes.csv")
#need to pad zeroes to some fips for join with geojson data:
county_votes$fips = ifelse(nchar(fips) !=4, fips, paste0(0, fips))
descp = "Great!"
n <- 10
pal <- brewer.pal(11, "RdBu")
dstops <- data.frame(q = 0:n/n, c = pal)
dstops <- list_parse2(dstops)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(
column(
verticalLayout(
wellPanel(descp)
)
) , width = 3),
column(
highchartOutput("plot", width = "800px", height = "800px"), width = 8)
)
)
server <- function(input, output) {
output$plot <- renderHighchart({
highchart() %>%
hc_title(text = "Change in Vote Percentage Between Obama (2012) and Clinton (2016)",
align = "left") %>%
hc_add_series_map(
uscountygeojson, county_votes, borderWidth = 0.2,
name = "Clinton - Obama", value = "Clinton_Obama", joinBy = "fips") %>%
hc_colorAxis(stops = dstops, min = -0.18, max = 0.18)  %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_legend(title = "Clinton")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(
column(
verticalLayout(
wellPanel(descp)
)
) , width = 3),
column(
highchartOutput("plot", width = "800px", height = "800px"), width = 8)
)
library(data.table)
library(dplyr)
library(ggplot2)
library(highcharter)
library(viridisLite)
library(RColorBrewer)
data(uscountygeojson)
county_votes = fread("/Users/alexpapiu/Downloads/2012-and-2016-presidential-elections/votes.csv")
#need to pad zeroes to some fips for join with geojson data:
county_votes$fips = ifelse(nchar(fips) !=4, fips, paste0(0, fips))
descp = "Great!"
n <- 10
pal <- brewer.pal(11, "RdBu")
dstops <- data.frame(q = 0:n/n, c = pal)
dstops <- list_parse2(dstops)
ui <- fluidPage(theme = shinytheme("flatly"),
fluidRow(
column(
verticalLayout(
wellPanel(descp)
) , width = 3),
column(
highchartOutput("plot", width = "800px", height = "800px"), width = 8)
)
)
server <- function(input, output) {
output$plot <- renderHighchart({
highchart() %>%
hc_title(text = "Change in Vote Percentage Between Obama (2012) and Clinton (2016)",
align = "left") %>%
hc_add_series_map(
uscountygeojson, county_votes, borderWidth = 0.2,
name = "Clinton - Obama", value = "Clinton_Obama", joinBy = "fips") %>%
hc_colorAxis(stops = dstops, min = -0.18, max = 0.18)  %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_legend(title = "Clinton")
})
}
shinyApp(ui = ui, server = server)
library(polynom)
library(glmnet)
ui <- fluidPage(theme = shinytheme("flatly"),
titlePanel("Overfitting"),
sidebarLayout(
sidebarPanel(checkboxInput(inputId = "seed", label = "Keep Data"),
sliderInput(inputId = "m1", label = "Degree of First Model", value = 20,
min = 1, max = 10,step = 1),
"Our Second Model",
checkboxInput(inputId = "second", label = "Show Second Model"),
sliderInput(inputId = "m2", label = "Degree of Second Model", value = 20,
min = 1, max = 10,step = 1),
sliderInput(inputId = "reg", label = "Regularization Parameter", value = 0,
min = 0, max = 1,step = .01),
sliderInput(inputId = "n", label = "Number of Examples", value = 50,
min = 10, max = 200,step = 1),
sliderInput(inputId = "q", label = "Degree of Target", value = 1,
min = 1, max = 5,step = 1),
sliderInput(inputId = "s", label = "Level of Noise", value = .5,
min = 0, max = 3,step = .1), width = 3),
mainPanel(plotOutput("plot", width = "800px", height = "600px"))
)
)
server <- function (input, output) {
output$plot <- renderPlot({
observeEvent(input$seed,{
set.seed(132)
})
m1 = input$m1
reg = input$reg
m2 = input$m2
n = input$n
q = input$q
s = input$s
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
A = model.matrix(x ~ poly(x, m1))
grid=10^seq(1,-5,length=100)
model_2 <- glmnet(A, y, lambda = grid, standardize = FALSE)
model_10 <- lm(y ~ poly(x, m2), data = df)
test <- runif(2000, min = -1, max = 1)
testdf <- data.frame(test)
colnames(testdf)[1]<-"x"
A_test = model.matrix(test ~ poly(test, m1))
new_reg <- predict.glmnet(model_2, newx = A_test, s=reg, type = "response")
newy_10 <- predict(model_10, newdata = testdf)
plot(test, predict(poly,test), ylim = c(-3,3), xlab = "x", ylab = "y", pch = 20 )
points(test, new_reg, col = "red", pch = 20)
points(test, newy_10, col = "green", pch = 20)
points(x, y, col = "dark blue")
})
}
shinyApp(ui, server)
library(polynom)
library(ggplot2)
library(shiny)
library(shinythemes)
ui <- fluidPage(theme = shinytheme("flatly"),
titlePanel("Overfitting"),
sidebarLayout(
sidebarPanel(checkboxInput(inputId = "seed", label = "Keep Data"),
sliderInput(inputId = "deg1", label = "Degree of First Model", value = 2,
min = 1, max = 20,step = 1),
"Our Second Model",
#checkboxInput(inputId = "second", label = "Show Second Model"),
#sliderInput(inputId = "m2", label = "Degree of Second Model", value = 20,
#            min = 1, max = 10,step = 1),
#sliderInput(inputId = "reg", label = "Regularization Parameter", value = 0,
#            min = 0, max = 1,step = .01),
sliderInput(inputId = "n", label = "Number of Examples", value = 50,
min = 10, max = 200,step = 1),
sliderInput(inputId = "q", label = "Degree of Target", value = 1,
min = 1, max = 5,step = 1),
sliderInput(inputId = "s", label = "Level of Noise", value = .5,
min = 0, max = 3,step = .1), width = 3),
mainPanel(plotOutput("plot", width = "800px", height = "600px"))
)
)
server <- function (input, output) {
data = reactive({
n = input$n
q = input$q
s = input$s
set.seed(233)
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynom::polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
return(list(data.frame(x, y), poly))
})
output$plot =  renderPlot({
polynomial <- as.function(data()[[2]])
ggplot(data()[[1]]) +
aes(x, y) +
geom_point(alpha = 0.7, size = 3, shape = 1) +
theme_classic() +
stat_function(fun = polynomial, size = 1.25, alpha = 0.9) +
geom_smooth(method = "lm", formula = y ~ poly(x,input$deg1),
color = "red", se = FALSE, size = 1.25, alpha = 0.9) +
theme(panel.background = element_rect(color = "black"))
})
}
shinyApp(ui, server)
n = 50
q = 10
s = 0.5
visoverfit <- function(n,q,s) {
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynom::polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
test <- seq(-1, 1, by = 0.01)
df2 <- data.frame(a = test, b = predict(poly, test))
)
library(ggvis)
library(polynom)
n = 50
q = 10
s = 0.5
visoverfit <- function(n,q,s) {
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynom::polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
test <- seq(-1, 1, by = 0.01)
df2 <- data.frame(a = test, b = predict(poly, test))
)
library(ggvis)
library(polynom)
n = 50
q = 10
s = 0.5
visoverfit <- function(n,q,s) {
x <- runif(n, min = -1, max = 1)
epsi <- rnorm(n) #noise
poly <- polynom::polynomial(rnorm(n = q+1)) #poly
y <- predict(poly, x) + sqrt(s)*epsi #values of poly +noise
df <- data.frame(x, y)
test <- seq(-1, 1, by = 0.01)
df2 <- data.frame(a = test, b = predict(poly, test))
ggvis(df, ~x, ~y)%>%
layer_points(size := 40, fillOpacity := 0.8) %>%
layer_paths(~a, ~b, data = df2, strokeWidth := 4) %>%
layer_smooths(span = input_slider(0.1, 2, value = 1),
stroke := "red", strokeWidth := 5)
}
visoverfit(100, 5, 1)
