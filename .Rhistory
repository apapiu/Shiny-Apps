shinyApp(ui = ui, server = server)
ui <- fluidPage(titlePanel("Aproximating Pi"),
wellPanel( sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
TextOutput("pi")),
mainPanel( plotOutput("plot"))))
ui <- fluidPage(titlePanel("Aproximating Pi"),
wellPanel( sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
VerbatimTextOutput("pi")),
mainPanel( plotOutput("plot"))))
ui <- fluidPage(titlePanel("Aproximating Pi"),
wellPanel( sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
mainPanel( plotOutput("plot"))))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Aproximating Pi"),
wellPanel( sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
mainPanel( plotOutput("plot"))))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Aproximating Pi"),
wellPanel( sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
mainPanel( plotOutput("plot"))))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Aproximating Pi"),
wellPanel( sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
mainPanel( plotOutput("plot", width = "100%"))))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Aproximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
mainPanel( plotOutput("plot", width = "100%"))))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Aproximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
plotOutput("plot", width = "100%"))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
plotOutput("plot", width = "100%"))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
?plotOutput
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
plotOutput("plot", width = "400px",
height = "400px"))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
mainPanel("Your Approximation of Pi is:",
verbatimTextOutput("pi")),
plotOutput("plot", width = "600px",
height = "600px"))
server <- function(input, output) {
output$pi <- renderPrint({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
4 *sum(inside)/input$num
})
output$plot <- renderPlot({
x <- replicate(2, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2}))<=1
y <- data.frame(x, inside)
pi <- 4 *sum(inside)/input$num
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
})
}
shinyApp(ui = ui, server = server)
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
x <- replicate(3, runif(n = n ,min = -1, max = 1))
n = 1000
x <- replicate(3, runif(n = n ,min = -1, max = 1))
View(x)
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
View(y)
names(y)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers")
library(plotly)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers")
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside, size = 1)
n = 100
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
n = 1000
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
n = 10000
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
?plot_ly
n = 100
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside, size = .1)
n = 100
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside, size = 10)
n = 100
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside, size = .001)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
n = 10000
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
library(shiny)
library(ggplot2)
library(rsconnect)
library(plotly)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotOutput("plot", width = "600px",
height = "600px"))
server <- function(input, output) {
output$plot <- renderPlot({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
library()
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotOutput("plot", width = "600px",
height = "600px"))
server <- function(input, output) {
output$plot <- renderPlot({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
library()
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotOutput("plot", width = "600px",
height = "600px"))
server <- function(input, output) {
output$plot <- renderPlot({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
#3d Plot:
library(plotly)
n = 10000
x <- replicate(3, runif(n = n ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
qplot(y[,1], y[,2], color = inside, xlab = "x", ylab = "y")
?plot_ly
library(shiny)
library(ggplot2)
library(rsconnect)
library(plotly)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotOutput("plot", width = "600px",
height = "600px"))
server <- function(input, output) {
output$plot <- renderPlot({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
library(plotly)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotOutput("plot", width = "600px",
height = "600px"))
server <- function(input, output) {
output$plot <- renderPlotly({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
library(plotly)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotlyOutput("plot", width = "600px",
height = "600px"))
server <- function(input, output) {
output$plot <- renderPlotly({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
library(plotly)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotlyOutput("3dplot", width = "800px",
height = "800px"))
server <- function(input, output) {
output$3dplot <- renderPlotly({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotlyOutput("3dplot", width = "800px",
height = "800px"))
server <- function(input, output) {
output$3dplot <- renderPlotly({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rsconnect)
library(plotly)
ui <- fluidPage(titlePanel("Approximating Pi"),
sliderInput(inputId = "num",
label = "Number of Points",
value = 5, min = 10, max = 20000),
plotlyOutput("plot", width = "800px",
height = "800px"))
server <- function(input, output) {
output$plot <- renderPlotly({
x <- replicate(3, runif(n = input$num ,min = -1, max = 1))
inside <- (apply(x, 1, function(x) {x[1]^2 +x[2]^2} +
x[3]^2))<=1
y <- data.frame(x, inside)
plot_ly(y, x = X1, y = X2, z = X3, type = "scatter3d", mode = "markers",
color = inside)
})
}
shinyApp(ui = ui, server = server)
